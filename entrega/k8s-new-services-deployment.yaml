###################################
#UTILIDADES
###################################
apiVersion: apps/v1
kind: Deployment
metadata:
  name: utilidades
  labels:
    app: utilidades
spec:
  replicas: 1
  selector:
    matchLabels:
      app: utilidades
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: utilidades
    spec:
      containers:
        - name: utilidades
          image: us-central1-docker.pkg.dev/deliveryandlogistic/deliveryandlogistic-images/utilidades:v1.0.0
          ports:
            - containerPort: 3004
          resources:
            requests:
              memory: "64Mi"
              cpu: "250m"
            limits:
              memory: "128Mi"
              cpu: "500m"
          env:
            - name: "DB_USER"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: DB_USER
            - name: "DB_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: DB_PASSWORD
            - name: "DB_HOST"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: DB_HOST
            - name: "DB_PORT"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: DB_PORT
            - name: "DB_NAME"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: DB_NAME
            - name: "USERS_PATH"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: USERS_PATH        
          # Realizar pull siempre a la imagen
          imagePullPolicy: Always
      volumes:
        - name: appsecrets-volume
          secret:
            secretName: appsecrets
---            
#--- HEALTHCHECK UTILIDADES
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: utilidades-config
spec:
  healthCheck:
    checkIntervalSec: 60
    port: 3004
    type: HTTP
    requestPath: /utilidades/ping
---
#--- SERVICE UTILIDADES
kind: Service
apiVersion: v1
metadata:
  name: servicio-utilidades
  annotations:
    cloud.google.com/backend-config: '{"default": "utilidades-config"}'  
spec:
  type: NodePort
  selector:
    app: utilidades
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3004
      nodePort: 31023
#--- UTILIDADES
---
###################################
#RF003
###################################
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rf003
  labels:
    app: rf003
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rf003
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: rf003
    spec:
      containers:
        - name: rf003
          image: us-central1-docker.pkg.dev/deliveryandlogistic/deliveryandlogistic-images/rf003:v1.0.0
          ports:
            - containerPort: 3005
          resources:
            requests:
              memory: "64Mi"
              cpu: "250m"
            limits:
              memory: "128Mi"
              cpu: "500m"
          env:
            - name: "POSTS_PATH"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: POSTS_PATH
            - name: "ROUTES_PATH"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: ROUTES_PATH      
          # Realizar pull siempre a la imagen
          imagePullPolicy: Always
      volumes:
        - name: appsecrets-volume
          secret:
            secretName: appsecrets
---            
#--- HEALTHCHECK RF003
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: rf003-config
spec:
  healthCheck:
    checkIntervalSec: 60
    port: 3005
    type: HTTP
    requestPath: /rf003/ping
---
#--- SERVICE RF003
kind: Service
apiVersion: v1
metadata:
  name: servicio-rf003
  annotations:
    cloud.google.com/backend-config: '{"default": "rf003-config"}'  
spec:
  type: NodePort
  selector:
    app: rf003
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3005
      nodePort: 31024
#--- RF003
---
###################################
#rf004
###################################
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rf004
  labels:
    app: rf004
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rf004
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: rf004
    spec:
      containers:
        - name: rf004
          image: us-central1-docker.pkg.dev/deliveryandlogistic/deliveryandlogistic-images/rf004:v1.0.0
          ports:
            - containerPort: 3006
          resources:
            requests:
              memory: "64Mi"
              cpu: "250m"
            limits:
              memory: "128Mi"
              cpu: "500m"
          env:
            - name: "USERS_PATH"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: USERS_PATH
            - name: "SCORES_PATH"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: SCORES_PATH
            - name: "POSTS_PATH"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: POSTS_PATH
            - name: "OFFERS_PATH"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: OFFERS_PATH
            - name: "ROUTES_PATH"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: ROUTES_PATH      
          # Realizar pull siempre a la imagen
          imagePullPolicy: Always
      volumes:
        - name: appsecrets-volume
          secret:
            secretName: appsecrets
---            
#--- HEALTHCHECK RF004
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: rf004-config
spec:
  healthCheck:
    checkIntervalSec: 60
    port: 3006
    type: HTTP
    requestPath: /rf004/posts/ping
---
#--- SERVICE RF004
kind: Service
apiVersion: v1
metadata:
  name: servicio-rf004
  annotations:
    cloud.google.com/backend-config: '{"default": "rf004-config"}'  
spec:
  type: NodePort
  selector:
    app: rf004
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3006
      nodePort: 31025
#--- RF004
---
###################################
#RF005
###################################
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rf005
  labels:
    app: rf005
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rf005
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: rf005
    spec:
      containers:
        - name: rf005
          image: us-central1-docker.pkg.dev/deliveryandlogistic/deliveryandlogistic-images/rf005:v1.0.0
          ports:
            - containerPort: 3007
          resources:
            requests:
              memory: "64Mi"
              cpu: "250m"
            limits:
              memory: "128Mi"
              cpu: "500m"
          env:
            - name: "USERS_PATH"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: USERS_PATH
            - name: "SCORES_PATH"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: SCORES_PATH
            - name: "POSTS_PATH"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: POSTS_PATH
            - name: "OFFERS_PATH"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: OFFERS_PATH
            - name: "ROUTES_PATH"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: ROUTES_PATH     
          # Realizar pull siempre a la imagen
          imagePullPolicy: Always
      volumes:
        - name: appsecrets-volume
          secret:
            secretName: appsecrets
---            
#--- HEALTHCHECK RF005
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: rf005-config
spec:
  healthCheck:
    checkIntervalSec: 60
    port: 3007
    type: HTTP
    requestPath: /rf005/ping
---
#--- SERVICE RF005
kind: Service
apiVersion: v1
metadata:
  name: servicio-rf005
  annotations:
    cloud.google.com/backend-config: '{"default": "rf005-config"}'  
spec:
  type: NodePort
  selector:
    app: rf005
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3007
      nodePort: 31026
#--- RF005