#USERS
apiVersion: apps/v1
kind: Deployment
metadata:
  name: users
  labels:
    app: users
spec:
  replicas: 1
  selector:
    matchLabels:
      app: users
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: users
    spec:
      containers:
        - name: users
          image: us-central1-docker.pkg.dev/deliveryandlogistic/deliveryandlogistic-images/users:v1.0.0
          ports:
            - containerPort: 3000
          resources:
            requests:
              memory: "64Mi"
              cpu: "250m"
            limits:
              memory: "128Mi"
              cpu: "500m"
          env:
            - name: "DB_USER"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: DB_USER
            - name: "DB_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: DB_PASSWORD
            - name: "DB_HOST"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: DB_HOST
            - name: "DB_PORT"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: DB_PORT
            - name: "DB_NAME"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: DB_NAME
            - name: "USERS_PATH"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: USERS_PATH        
          # Realizar pull siempre a la imagen
          imagePullPolicy: Always
      volumes:
        - name: appsecrets-volume
          secret:
            secretName: appsecrets   
---         
# HEALTHCHECK users
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: users-config
spec:
  healthCheck:
    checkIntervalSec: 60
    port: 3000
    type: HTTP
    requestPath: /users/ping
---
#--- SERVICE users
kind: Service
apiVersion: v1
metadata:
  name: servicio-users
  annotations:
    cloud.google.com/backend-config: '{"default": "users-config"}'  
spec:
  type: NodePort
  selector:
    app: users
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3000
      nodePort: 31019
#--- USERS
---
#ROUTES
apiVersion: apps/v1
kind: Deployment
metadata:
  name: routes
  labels:
    app: routes
spec:
  replicas: 1
  selector:
    matchLabels:
      app: routes
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: routes
    spec:
      containers:
        - name: routes
          image: us-central1-docker.pkg.dev/deliveryandlogistic/deliveryandlogistic-images/routes:v1.0.0
          ports:
            - containerPort: 3002
          resources:
            requests:
              memory: "64Mi"
              cpu: "250m"
            limits:
              memory: "128Mi"
              cpu: "500m"
          env:
            - name: "DB_USER"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: DB_USER
            - name: "DB_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: DB_PASSWORD
            - name: "DB_HOST"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: DB_HOST
            - name: "DB_PORT"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: DB_PORT
            - name: "DB_NAME"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: DB_NAME
            - name: "USERS_PATH"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: USERS_PATH        
          # Realizar pull siempre a la imagen
          imagePullPolicy: Always
      volumes:
        - name: appsecrets-volume
          secret:
            secretName: appsecrets    
---        
#--- HEALTHCHECK ROUTES
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: routes-config
spec:
  healthCheck:
    checkIntervalSec: 60
    port: 3002
    type: HTTP
    requestPath: /routes/ping
---
#--- SERVICE ROUTES
kind: Service
apiVersion: v1
metadata:
  name: servicio-routes
  annotations:
    cloud.google.com/backend-config: '{"default": "routes-config"}'  
spec:
  type: NodePort
  selector:
    app: routes
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3002
      nodePort: 31020
#--- ROUTES
---
#POSTS
apiVersion: apps/v1
kind: Deployment
metadata:
  name: posts
  labels:
    app: posts
spec:
  replicas: 1
  selector:
    matchLabels:
      app: posts
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: posts
    spec:
      containers:
        - name: posts
          image: us-central1-docker.pkg.dev/deliveryandlogistic/deliveryandlogistic-images/posts:v1.0.0
          ports:
            - containerPort: 3001
          resources:
            requests:
              memory: "64Mi"
              cpu: "250m"
            limits:
              memory: "128Mi"
              cpu: "500m"
          env:
            - name: "DB_USER"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: DB_USER
            - name: "DB_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: DB_PASSWORD
            - name: "DB_HOST"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: DB_HOST
            - name: "DB_PORT"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: DB_PORT
            - name: "DB_NAME"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: DB_NAME
            - name: "USERS_PATH"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: USERS_PATH        
          # Realizar pull siempre a la imagen
          imagePullPolicy: Always
      volumes:
        - name: appsecrets-volume
          secret:
            secretName: appsecrets
---            
#--- HEALTHCHECK POSTS
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: posts-config
spec:
  healthCheck:
    checkIntervalSec: 60
    port: 3001
    type: HTTP
    requestPath: /posts/ping
---
#--- SERVICE POSTS
kind: Service
apiVersion: v1
metadata:
  name: servicio-posts
  annotations:
    cloud.google.com/backend-config: '{"default": "posts-config"}'  
spec:
  type: NodePort
  selector:
    app: posts
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3001
      nodePort: 31021
#--- POSTS
---
#OFFERS
apiVersion: apps/v1
kind: Deployment
metadata:
  name: offers
  labels:
    app: offers
spec:
  replicas: 1
  selector:
    matchLabels:
      app: offers
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: offers
    spec:
      containers:
        - name: offers
          image: us-central1-docker.pkg.dev/deliveryandlogistic/deliveryandlogistic-images/offers:v1.0.0
          ports:
            - containerPort: 3003
          resources:
            requests:
              memory: "64Mi"
              cpu: "250m"
            limits:
              memory: "128Mi"
              cpu: "500m"
          env:
            - name: "DB_USER"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: DB_USER
            - name: "DB_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: DB_PASSWORD
            - name: "DB_HOST"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: DB_HOST
            - name: "DB_PORT"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: DB_PORT
            - name: "DB_NAME"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: DB_NAME
            - name: "USERS_PATH"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: USERS_PATH        
          # Realizar pull siempre a la imagen
          imagePullPolicy: Always
      volumes:
        - name: appsecrets-volume
          secret:
            secretName: appsecrets
---            
#--- HEALTHCHECK OFFERS
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: offers-config
spec:
  healthCheck:
    checkIntervalSec: 60
    port: 3003
    type: HTTP
    requestPath: /offers/ping
---
#--- SERVICE OFFERS
kind: Service
apiVersion: v1
metadata:
  name: servicio-offers
  annotations:
    cloud.google.com/backend-config: '{"default": "offers-config"}'  
spec:
  type: NodePort
  selector:
    app: offers
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3003
      nodePort: 31022
#--- OFFERS
---
#UTILIDADES
apiVersion: apps/v1
kind: Deployment
metadata:
  name: utilidades
  labels:
    app: utilidades
spec:
  replicas: 1
  selector:
    matchLabels:
      app: utilidades
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: utilidades
    spec:
      containers:
        - name: utilidades
          image: us-central1-docker.pkg.dev/deliveryandlogistic/deliveryandlogistic-images/utilidades:v1.0.0
          ports:
            - containerPort: 3004
          resources:
            requests:
              memory: "64Mi"
              cpu: "250m"
            limits:
              memory: "128Mi"
              cpu: "500m"
          env:
            - name: "DB_USER"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: DB_USER
            - name: "DB_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: DB_PASSWORD
            - name: "DB_HOST"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: DB_HOST
            - name: "DB_PORT"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: DB_PORT
            - name: "DB_NAME"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: DB_NAME
            - name: "USERS_PATH"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: USERS_PATH        
          # Realizar pull siempre a la imagen
          imagePullPolicy: Always
      volumes:
        - name: appsecrets-volume
          secret:
            secretName: appsecrets
---            
#--- HEALTHCHECK UTILIDADES
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: utilidades-config
spec:
  healthCheck:
    checkIntervalSec: 60
    port: 3004
    type: HTTP
    requestPath: /utilidades/ping
---
#--- SERVICE UTILIDADES
kind: Service
apiVersion: v1
metadata:
  name: servicio-utilidades
  annotations:
    cloud.google.com/backend-config: '{"default": "utilidades-config"}'  
spec:
  type: NodePort
  selector:
    app: utilidades
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3004
      nodePort: 31023
#--- UTILIDADES
---
#RF003
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rf003
  labels:
    app: rf003
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rf003
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: rf003
    spec:
      containers:
        - name: rf003
          image: us-central1-docker.pkg.dev/deliveryandlogistic/deliveryandlogistic-images/rf003:v1.0.0
          ports:
            - containerPort: 3005
          resources:
            requests:
              memory: "64Mi"
              cpu: "250m"
            limits:
              memory: "128Mi"
              cpu: "500m"
          env:
            - name: "POSTS_PATH"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: POSTS_PATH
            - name: "ROUTES_PATH"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: ROUTES_PATH      
          # Realizar pull siempre a la imagen
          imagePullPolicy: Always
      volumes:
        - name: appsecrets-volume
          secret:
            secretName: appsecrets
---            
#--- HEALTHCHECK RF003
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: rf003-config
spec:
  healthCheck:
    checkIntervalSec: 60
    port: 3005
    type: HTTP
    requestPath: /rf003/ping
---
#--- SERVICE RF003
kind: Service
apiVersion: v1
metadata:
  name: servicio-rf003
  annotations:
    cloud.google.com/backend-config: '{"default": "rf003-config"}'  
spec:
  type: NodePort
  selector:
    app: rf003
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3005
      nodePort: 31024
#--- RF003
---
#rf004
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rf004
  labels:
    app: rf004
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rf004
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: rf004
    spec:
      containers:
        - name: rf004
          image: us-central1-docker.pkg.dev/deliveryandlogistic/deliveryandlogistic-images/rf004:v1.0.0
          ports:
            - containerPort: 3006
          resources:
            requests:
              memory: "64Mi"
              cpu: "250m"
            limits:
              memory: "128Mi"
              cpu: "500m"
          env:
            - name: "USERS_PATH"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: USERS_PATH
            - name: "SCORES_PATH"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: SCORES_PATH
            - name: "POSTS_PATH"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: POSTS_PATH
            - name: "OFFERS_PATH"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: OFFERS_PATH
            - name: "ROUTES_PATH"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: ROUTES_PATH      
          # Realizar pull siempre a la imagen
          imagePullPolicy: Always
      volumes:
        - name: appsecrets-volume
          secret:
            secretName: appsecrets
---            
#--- HEALTHCHECK RF004
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: rf004-config
spec:
  healthCheck:
    checkIntervalSec: 60
    port: 3006
    type: HTTP
    requestPath: /rf004/posts/ping
---
#--- SERVICE RF004
kind: Service
apiVersion: v1
metadata:
  name: servicio-rf004
  annotations:
    cloud.google.com/backend-config: '{"default": "rf004-config"}'  
spec:
  type: NodePort
  selector:
    app: rf004
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3006
      nodePort: 31025
#--- RF004
---
#RF005
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rf005
  labels:
    app: rf005
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rf005
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: rf005
    spec:
      containers:
        - name: rf005
          image: us-central1-docker.pkg.dev/deliveryandlogistic/deliveryandlogistic-images/rf005:v1.0.0
          ports:
            - containerPort: 3007
          resources:
            requests:
              memory: "64Mi"
              cpu: "250m"
            limits:
              memory: "128Mi"
              cpu: "500m"
          env:
            - name: "USERS_PATH"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: USERS_PATH
            - name: "SCORES_PATH"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: SCORES_PATH
            - name: "POSTS_PATH"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: POSTS_PATH
            - name: "OFFERS_PATH"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: OFFERS_PATH
            - name: "ROUTES_PATH"
              valueFrom:
                secretKeyRef:
                  name: appsecrets 
                  key: ROUTES_PATH     
          # Realizar pull siempre a la imagen
          imagePullPolicy: Always
      volumes:
        - name: appsecrets-volume
          secret:
            secretName: appsecrets
---            
#--- HEALTHCHECK RF005
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: rf005-config
spec:
  healthCheck:
    checkIntervalSec: 60
    port: 3007
    type: HTTP
    requestPath: /rf005/ping
---
#--- SERVICE RF005
kind: Service
apiVersion: v1
metadata:
  name: servicio-rf005
  annotations:
    cloud.google.com/backend-config: '{"default": "rf005-config"}'  
spec:
  type: NodePort
  selector:
    app: rf005
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3007
      nodePort: 31026
#--- RF005
---
# INGRESS
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: gateway-ingress
  labels:
    name: gateway-ingress
spec:
  rules:
  - http:
      paths:
      - pathType: Prefix
        path: /users
        backend:
          service:
            name: servicio-users
            port: 
              number: 80
      - pathType: Prefix
        path: /routes
        backend:
          service:
            name: servicio-routes
            port: 
              number: 80
      - pathType: Prefix
        path: /posts
        backend:
          service:
            name: servicio-posts
            port: 
              number: 80
      - pathType: Prefix
        path: /offers
        backend:
          service:
            name: servicio-offers
            port: 
              number: 80
      - pathType: Prefix
        path: /utilidades
        backend:
          service:
            name: servicio-utilidades
            port: 
              number: 80
      - pathType: Prefix
        path: /rf003
        backend:
          service:
            name: servicio-rf003
            port: 
              number: 80
      - pathType: Prefix
        path: /rf004
        backend:
          service:
            name: servicio-rf004
            port: 
              number: 80
      - pathType: Prefix
        path: /rf005
        backend:
          service:
            name: servicio-rf005
            port: 
              number: 80